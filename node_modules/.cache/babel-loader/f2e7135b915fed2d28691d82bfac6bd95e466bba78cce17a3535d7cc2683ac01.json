{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      productsList: null,\n      offset: 6,\n      limit: 6,\n      nextOffset: 0\n    };\n  },\n  computed: {\n    displayedProductsList() {\n      if (this.productsList) {\n        return this.productsList;\n      }\n      return [];\n    }\n  },\n  methods: {\n    getProducts() {\n      const apiKey = 'api-key-test';\n      const requestId = 'test';\n      const apiUrl = 'https://express-api-mslb.onrender.com/products';\n      axios.get(apiUrl, {\n        headers: {\n          'x-api-key': apiKey,\n          'x-request-id': requestId\n        }\n      }).then(response => {\n        this.productsList = response.data.map(item => {\n          return {\n            id: item._id,\n            name: item.prod_name || item.product_name,\n            description: item.prod_desc || item.product_desc,\n            price: item.prod_price || item.product_price,\n            updatedAt: item.updated_at,\n            createdAt: item.created_at\n          };\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    copyProductName(name) {\n      navigator.clipboard.writeText(name).then(() => {\n        console.log('Copied to clipboard:', name);\n      }).catch(error => {\n        console.error('Failed to copy to clipboard:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","productsList","offset","limit","nextOffset","computed","displayedProductsList","methods","getProducts","apiKey","requestId","apiUrl","get","headers","then","response","map","item","id","_id","name","prod_name","product_name","description","prod_desc","product_desc","price","prod_price","product_price","updatedAt","updated_at","createdAt","created_at","catch","error","console","copyProductName","navigator","clipboard","writeText","log"],"sources":["src/components/GetProduct.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n      <div class=\"pokemon-section\">\n        <h3>Product List:</h3>\n        <table class=\"table\" v-if=\"productsList\">\n          <thead>\n            <tr>\n              <th>Product Name</th>\n              <th>Product Description</th>\n              <th>Product Price</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"product in displayedProductsList\" :key=\"product.id\" class=\"pokemon-item\">\n              <td>{{ product.name }}</td>\n              <td>{{ product.description }}</td>\n              <td>{{ product.price }}</td>\n              <td><button @click=\"copyProductName(product.name)\" class=\"btn-copy\">Copy</button></td>\n            </tr>\n          </tbody>\n        </table>\n        <div class=\"button-container\">\n          <button @click=\"getProducts\" class=\"btn-get-products\">Get Products</button>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        productsList: null,\n        offset: 6,\n        limit: 6,\n        nextOffset: 0,\n      };\n    },\n    computed: {\n      displayedProductsList() {\n        if (this.productsList) {\n          return this.productsList;\n        }\n        return [];\n      },\n    },\n    methods: {\n      getProducts() {\n        const apiKey = 'api-key-test';\n        const requestId = 'test';\n        const apiUrl = 'https://express-api-mslb.onrender.com/products';\n  \n        axios.get(apiUrl, {\n          headers: {\n            'x-api-key': apiKey,\n            'x-request-id': requestId\n          }\n        })\n        .then(response => {\n          this.productsList = response.data.map(item => {\n            return {\n              id: item._id,\n              name: item.prod_name || item.product_name,\n              description: item.prod_desc || item.product_desc,\n              price: item.prod_price || item.product_price,\n              updatedAt: item.updated_at,\n              createdAt: item.created_at\n            };\n          });\n        })\n        .catch(error => {\n          console.error(error);\n        });\n      },\n      copyProductName(name) {\n        navigator.clipboard.writeText(name)\n          .then(() => {\n            console.log('Copied to clipboard:', name);\n          })\n          .catch(error => {\n            console.error('Failed to copy to clipboard:', error);\n          });\n      },\n    },\n  };\n  </script>\n  \n  <style>\n  .container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 2rem;\n  }\n  \n  .pokemon-section {\n    margin-bottom: 2rem;\n  }\n  \n  .table {\n    width: 100%;\n    border-collapse: collapse\n  "],"mappings":"AA8BA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,MAAA;MACAC,KAAA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACAC,sBAAA;MACA,SAAAL,YAAA;QACA,YAAAA,YAAA;MACA;MACA;IACA;EACA;EACAM,OAAA;IACAC,YAAA;MACA,MAAAC,MAAA;MACA,MAAAC,SAAA;MACA,MAAAC,MAAA;MAEAZ,KAAA,CAAAa,GAAA,CAAAD,MAAA;QACAE,OAAA;UACA,aAAAJ,MAAA;UACA,gBAAAC;QACA;MACA,GACAI,IAAA,CAAAC,QAAA;QACA,KAAAd,YAAA,GAAAc,QAAA,CAAAf,IAAA,CAAAgB,GAAA,CAAAC,IAAA;UACA;YACAC,EAAA,EAAAD,IAAA,CAAAE,GAAA;YACAC,IAAA,EAAAH,IAAA,CAAAI,SAAA,IAAAJ,IAAA,CAAAK,YAAA;YACAC,WAAA,EAAAN,IAAA,CAAAO,SAAA,IAAAP,IAAA,CAAAQ,YAAA;YACAC,KAAA,EAAAT,IAAA,CAAAU,UAAA,IAAAV,IAAA,CAAAW,aAAA;YACAC,SAAA,EAAAZ,IAAA,CAAAa,UAAA;YACAC,SAAA,EAAAd,IAAA,CAAAe;UACA;QACA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,CAAAA,KAAA;MACA;IACA;IACAE,gBAAAhB,IAAA;MACAiB,SAAA,CAAAC,SAAA,CAAAC,SAAA,CAAAnB,IAAA,EACAN,IAAA;QACAqB,OAAA,CAAAK,GAAA,yBAAApB,IAAA;MACA,GACAa,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,iCAAAA,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}